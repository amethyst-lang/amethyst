use lalrpop_util::ParseError;

use crate::frontend::parsing::{self, Ast, Error};
use std::str::FromStr;

grammar;

extern {
    type Error = Error;
}

match {
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
    _
}

IntRaw: u64 = {
    <s:r"0b[01]+"> =>? u64::from_str_radix(&s[2..], 2).map_err(|_| ParseError::User {
        error: Error::NumberTooBig,
    }),
    <s:r"0o[01234567]+"> =>? u64::from_str_radix(&s[2..], 8).map_err(|_| ParseError::User {
        error: Error::NumberTooBig,
    }),
    <s:r"0x[0-9a-fA-F]+"> =>? u64::from_str_radix(&s[2..], 16).map_err(|_| ParseError::User {
        error: Error::NumberTooBig,
    }),
    <s:r"[0-9]+"> =>? u64::from_str(s).map_err(|_| ParseError::User {
        error: Error::NumberTooBig,
    }),
}

Int: Ast<'input> =
    <s:@L> <v:IntRaw> <e:@R> => Ast::Int(s..e, v);

FloatRaw: f64 =
    <s:r"[0-9]+((\.[0-9]+)([eE][+\-]?[0-9]+)?|[eE][+\-]?[0-9]+)"> =>? s.parse().map_err(|_| ParseError::User {
        error: Error::NumberTooBig,
    });

Float: Ast<'input> =
    <s:@L> <v:FloatRaw> <e:@R> => Ast::Float(s..e, v);

Char: Ast<'input> = {
    <s:@L> <v:r"'[^\\']'"> <e:@R> => Ast::Char(s..e, v.bytes().nth(1).unwrap()),
    <s:@L> <v:"'\\n'"> <e:@R> => Ast::Char(s..e, b'\n'),
    <s:@L> <v:"'\\r'"> <e:@R> => Ast::Char(s..e, b'\r'),
    <s:@L> <v:"'\\t'"> <e:@R> => Ast::Char(s..e, b'\t'),
    <s:@L> <v:"'\\0'"> <e:@R> => Ast::Char(s..e, b'\0'),
    <s:@L> <v:"'\\\\'"> <e:@R> => Ast::Char(s..e, b'\\'),
    <s:@L> <v:"'\\''"> <e:@R> => Ast::Char(s..e, b'\''),
    <s:@L> <v:"'\\\"'"> <e:@R> => Ast::Char(s..e, b'\"'),
}

Bool: Ast<'input> = {
    <s:@L> <v:"true"> <e:@R> => Ast::Int(s..e, 1),
    <s:@L> <v:"false"> <e:@R> => Ast::Int(s..e, 0),
}

Str: Ast<'input> = {
    <s:@L> <v:r#""([^\\"]|\\.)*""#> <e:@R> => Ast::Str(s..e, parsing::unescape_sequences(&v[1..v.len() - 1])),
    <s:@L> <v:r"(\\\\[^\n]*\n*)+"> <e:@R> => Ast::Str(s..e, parsing::strip_backslashes(v)),
}

SymbolRaw =
    <r#"[^`1234567890\[\]:\\;',\.#(){}"\s][^`\[\]:\\;',\.@#(){}"\s]*|:"#>;

Symbol: Ast<'input> =
    <s:@L> <v:SymbolRaw> <e:@R> => Ast::Symbol(s..e, v);

KeyRaw =
    <r#":[^`1234567890\[\]:\\;',\.#(){}"\s][^`\[\]:\\;',\.@#(){}"\s]*"#>;

Key: Ast<'input> =
    <s:@L> <v:KeyRaw> <e:@R> => Ast::Key(s..e, &v[1..]);

SExpr: Ast<'input> =
    <s:@L> "(" <v:Attribute*> ")" <e:@R> => Ast::SExpr(s..e, v);

// AttributeElement: Ast<'input> = {
    // <Symbol>,
    // <SExpr>
// };

Attribute: Ast<'input> = {
    PrefixOp,
    <s:Attribute> "." <a:Symbol> => {
        Ast::Attribute(s.span().start..a.span().end, Box::new(s), Box::new(a))
    }
};

Value: Ast<'input> = {
    <Int>,
    <Float>,
    <Char>,
    <Bool>,
    <Str>,
    <Symbol>,
    <Key>,
    <SExpr>,
};

PrefixOp: Ast<'input> = {
    <s:@L> "'" <v:PrefixOp> <e:@R> => Ast::Quote(s..e, Box::new(v)),
    <s:@L> "`" <v:PrefixOp> <e:@R> => Ast::Backtick(s..e, Box::new(v)),
    <s:@L> "," <v:PrefixOp> <e:@R> => Ast::Comma(s..e, Box::new(v)),
    <s:@L> ",@" <v:PrefixOp> <e:@R> => Ast::Splice(s..e, Box::new(v)),
    <Value>,
};

pub Top: Vec<Ast<'input>> =
    <SExpr*>;
