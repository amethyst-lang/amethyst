class Eq a =
	val eq : a -> a -> bool
end

instance Eq i32 =
	let eq a b = true
end

class Ord a where Eq a =
	val lt : a -> a -> bool
end

instance Ord i32 =
	let lt a b = false
end

type List a
	= Nil
	| Cons a (List a)

type Pair a b = Pair a b

instance forall a b where Eq a, Eq b. Eq (Pair a b) =
	let eq a b =
		match Pair a b with
		| Pair (Pair a b) (Pair c d) to
			if eq a c then
				eq b d
			else false
		end
end

instance forall a where Eq a. Eq (List a) =
	let eq xs ys =
		match Pair xs ys with
		| Pair (Cons x xs) (Cons y ys) to
			if eq x y then
				eq xs ys
			else false
		| Pair Nil Nil to true
		| _ to false
		end
end

val sorted : forall a where Ord a. List a -> bool
let sorted xs =
	match xs with
	| Nil | Cons _ Nil to true
	| Cons x (Cons y xs) to
		if lt x y then
			sorted (Cons y xs)
		else if eq x y then
			sorted (Cons y xs)
		else false
	end

val map : forall a b. (a -> b) -> List a -> List b
let map f xs =
	match xs with
	| Cons x xs to Cons (f x) (map f xs)
	| Nil to Nil
	end

let foldl f a xs =
	match xs with
	| Nil to a
	| Cons x xs to foldl f (f a x) xs
	end
