(defext syscall
    (call u64)
    (a u64)
    (b u64)
    (c u64)
    (d u64)
    (e u64)
    (f u64)
    : u64
    "syscall_")

(defmacro
    while condy
        stat
        &key else
    (loop
        (cond
            (condy stat)
            (:else (break else)))))

(defun main
    (seqn
        (let SIZE = 30)
        (let board = (alloca SIZE))
        (let i = 0)
        (while (< i SIZE)
            (seqn
                (set (get board i) = 0)
                (set i = (+ i 1))))
        (let i = 0)
        (set (get board (- SIZE 2)) = 1)
        (let s = '\0')
        (while (< i SIZE)
            (seqn
                (let j = 0)
                (while (< j (- SIZE 2))
                    (seqn
                        (set s =
                            (cond
                                ((get board j) '*')
                                (:else ' ')))
                        (syscall 1 1 (cast (ref s)) 1 0 0 0)
                        (set j = (+ j 1))))
                (set s = '\n')
                (syscall 1 1 (cast (ref s)) 1 0 0 0)
                (let pattern = (| (<< (get board 0) 1) (get board 1)))
                (let j = 0)
                (while (< j (- SIZE 1))
                    (seqn
                        (set pattern = (| (& (<< pattern 1) 7) (get board (+ j 1))))
                        (set (get board j) = (& (>> 110 pattern) 1))
                        (set j = (+ j 1))))
                (set i = (+ i 1))))))

